{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "baseUrl": {
      "type": "string",
      "metadata": {
        "description": "The base URL for dependent assets",
        "artifactsBaseUrl": ""
      },
      "defaultValue": "https://gallery.azure.com/artifact/20151001/bitnami.production-mongodbdefault.1.0.1/Artifacts"
    },
    "stackId": {
      "type": "string",
      "minLength": 3,
      "maxLength": 23,
      "metadata": {
        "description": "Stack ID - it is the Application Stack identifier."
      }
    },
    "sshKey": {
      "type": "string",
      "metadata": {
        "description": "SSH rsa public key file as a string."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS1",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "numReplicas": {
      "type": "int",
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "defaultValue": 3,
      "metadata": {
        "description": "Number of machines to run in total ; specify an odd number of add an arbiter"
      }
    },
    "arbiterCount": {
      "type": "int",
      "allowedValues": [
        0,
        1
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "Number of arbiters to run"
      }
    }
  },
  "variables": {
    "appId": "mongodb",
    "appVersion": "3.2.7-1",
    "StorageAccountName": "iaprodnew01",
    "resourceAPIVersion": "2015-06-15",
    "publicIPAddressName": "[concat(parameters('stackId'), 'ip')]",
    "dnsPrefix": "[concat(parameters('stackId'),uniquestring(resourceGroup().id))]",
    "scriptsUri": "[concat(parameters('baseUrl'),'/')]",
    "peerAddressIndex": 0,
    "availabilitySetName": "bitnamihs",
    "machineCount": "[add(int(parameters('numReplicas')), int(parameters('arbiterCount')))]",
    "machineTierMap": "[concat('main=1,arbiter=',int(parameters('arbiterCount')),',slave,0,')]",
    "availabilitySetPlatformFaultDomainCount": 2,
    "availabilitySetPlatformUpdateDomainCount": 2,
    "iaresoucegroupe": "iaprodnew",
    "virtualNetworkName": "iaprodneweast",
    "subnetName": "Subnet-dmz2",
    "vnetId": "[resourceId('iaprodnew','Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[parameters('location')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('stackId'), '0nic')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[parameters('location')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('stackId'), add(copyIndex(), 1), 'nic')]",
      "copy": {
        "name": "niccopy",
        "count": "[sub(variables('machineCount'), 1)]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[parameters('location')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsPrefix')]"
        }
      }
    },
    {
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2015-06-15",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": "[variables('availabilitySetPlatformFaultDomainCount')]",
        "platformUpdateDomainCount": "[variables('availabilitySetPlatformUpdateDomainCount')]"
      }
    },
    {
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[parameters('location')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('stackId'), copyIndex())]",
      "copy": {
        "name": "vmcopy",
        "count": "[variables('machineCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', concat(parameters('stackId'), copyIndex(), 'nic'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('stackId'), copyIndex())]",
          "adminUsername": "bitnami",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "/home/bitnami/.ssh/authorized_keys",
                  "keyData": "[parameters('sshKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "14.04.2-LTS",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(concat(reference(resourceId('iaprodnew', 'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-06-15').primaryEndpoints['blob'], 'vhds/'),'os-',concat(parameters('stackId'), copyIndex()),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "data",
              "vhd": {
                "uri": "[concat(concat(reference(resourceId('iaprodnew', 'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-06-15').primaryEndpoints['blob'], 'vhds/'),'data-',concat(parameters('stackId'), copyIndex()),'.vhd')]"
              },
              "createOption": "Empty",
              "diskSizeGB": "25",
              "lun": 0
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('stackId'), copyIndex(), 'nic'))]"
            }
          ]
        },
      }
    },
    {
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[parameters('location')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('stackId'), copyIndex(), '/setupMachine')]",
      "copy": {
        "name": "vmextcopy",
        "count": "[variables('machineCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('stackId'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('baseUrl'),'/provisioner-first-boot.sh')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('sh ./provisioner-first-boot.sh \"', parameters('baseUrl'), '\" \"', variables('appId'), '-', variables('appVersion'), '\" --cloud-name azure --peer-password-input ', uniqueString(subscription().subscriptionId, ' ', resourceGroup().id, ' ', deployment().name), ' --instance-tier-map ', variables('machineTierMap'), copyIndex(), ' --peer-address ', reference(concat(parameters('stackId'), variables('peerAddressIndex'), 'nic')).ipConfigurations[0].properties.privateIPAddress)]"
        }
      }
    }
  ],
  "outputs": {
    "fqdn": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName')), providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]).dnsSettings.fqdn]",
      "type": "string"
    }
  }
}